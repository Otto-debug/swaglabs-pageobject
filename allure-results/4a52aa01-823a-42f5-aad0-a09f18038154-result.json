{"name": "test_add_item_to_cart[Sauce Labs Backpack-1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\n  (Session info: chrome=126.0.6478.126); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n#0 0x64b09be78c5a <unknown>\n#1 0x64b09bb5be2c <unknown>\n#2 0x64b09bb61539 <unknown>\n#3 0x64b09bb632e5 <unknown>\n#4 0x64b09bb6336c <unknown>\n#5 0x64b09bba821e <unknown>\n#6 0x64b09bba8751 <unknown>\n#7 0x64b09bbecfa1 <unknown>\n#8 0x64b09bbcb5ed <unknown>\n#9 0x64b09bbea303 <unknown>\n#10 0x64b09bbcb363 <unknown>\n#11 0x64b09bb9b247 <unknown>\n#12 0x64b09bb9bb9e <unknown>\n#13 0x64b09be3f22b <unknown>\n#14 0x64b09be432d1 <unknown>\n#15 0x64b09be2aade <unknown>\n#16 0x64b09be43e32 <unknown>\n#17 0x64b09be0f77f <unknown>\n#18 0x64b09be68618 <unknown>\n#19 0x64b09be687f0 <unknown>\n#20 0x64b09be77d8c <unknown>\n#21 0x7a2bd6494ac3 <unknown>", "trace": "login_and_go_to_inventory = <pages.inventory_page.InventoryPage object at 0x787b82a36380>, item_name = 'Sauce Labs Backpack', expected_count = 1\n\n    @allure.story('Положительные тесты страницы товаров')\n    @pytest.mark.parametrize(\n        \"item_name, expected_count\",\n        [\n            (\"Sauce Labs Backpack\", 1),\n            (\"Sauce Labs Bike Light\", 1),\n        ]\n    )\n    def test_add_item_to_cart(login_and_go_to_inventory, item_name, expected_count):\n        inventory_page = login_and_go_to_inventory\n    \n        with allure.step(f'Добавляем товар: {item_name}'):\n>           inventory_page.add_item_to_cart(item_name)\n\ntests/test_inventory_page.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/inventory_page.py:16: in add_item_to_cart\n    add_buttons = self.find_elements(InventPage.ITEM_ADD_BUTTON)\npages/base_page.py:21: in find_elements\n    return WebDriverWait(self.driver, timeout=20).until(EC.presence_of_all_elements_located(locator),\n.venv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n.venv/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:191: in _predicate\n    return driver.find_elements(*locator)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:792: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x787b82a373d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...\\\\n#19 0x64b09be687f0 \\\\u003Cunknown>\\\\n#20 0x64b09be77d8c \\\\u003Cunknown>\\\\n#21 0x7a2bd6494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\nE         (Session info: chrome=126.0.6478.126); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       #0 0x64b09be78c5a <unknown>\nE       #1 0x64b09bb5be2c <unknown>\nE       #2 0x64b09bb61539 <unknown>\nE       #3 0x64b09bb632e5 <unknown>\nE       #4 0x64b09bb6336c <unknown>\nE       #5 0x64b09bba821e <unknown>\nE       #6 0x64b09bba8751 <unknown>\nE       #7 0x64b09bbecfa1 <unknown>\nE       #8 0x64b09bbcb5ed <unknown>\nE       #9 0x64b09bbea303 <unknown>\nE       #10 0x64b09bbcb363 <unknown>\nE       #11 0x64b09bb9b247 <unknown>\nE       #12 0x64b09bb9bb9e <unknown>\nE       #13 0x64b09be3f22b <unknown>\nE       #14 0x64b09be432d1 <unknown>\nE       #15 0x64b09be2aade <unknown>\nE       #16 0x64b09be43e32 <unknown>\nE       #17 0x64b09be0f77f <unknown>\nE       #18 0x64b09be68618 <unknown>\nE       #19 0x64b09be687f0 <unknown>\nE       #20 0x64b09be77d8c <unknown>\nE       #21 0x7a2bd6494ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSelectorException"}, "steps": [{"name": "Добавляем товар: Sauce Labs Backpack", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\n  (Session info: chrome=126.0.6478.126); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n#0 0x64b09be78c5a <unknown>\n#1 0x64b09bb5be2c <unknown>\n#2 0x64b09bb61539 <unknown>\n#3 0x64b09bb632e5 <unknown>\n#4 0x64b09bb6336c <unknown>\n#5 0x64b09bba821e <unknown>\n#6 0x64b09bba8751 <unknown>\n#7 0x64b09bbecfa1 <unknown>\n#8 0x64b09bbcb5ed <unknown>\n#9 0x64b09bbea303 <unknown>\n#10 0x64b09bbcb363 <unknown>\n#11 0x64b09bb9b247 <unknown>\n#12 0x64b09bb9bb9e <unknown>\n#13 0x64b09be3f22b <unknown>\n#14 0x64b09be432d1 <unknown>\n#15 0x64b09be2aade <unknown>\n#16 0x64b09be43e32 <unknown>\n#17 0x64b09be0f77f <unknown>\n#18 0x64b09be68618 <unknown>\n#19 0x64b09be687f0 <unknown>\n#20 0x64b09be77d8c <unknown>\n#21 0x7a2bd6494ac3 <unknown>\n\n", "trace": "  File \"/media/grifftih/Linux/TestCases/SwagLabs/tests/test_inventory_page.py\", line 35, in test_add_item_to_cart\n    inventory_page.add_item_to_cart(item_name)\n  File \"/media/grifftih/Linux/TestCases/SwagLabs/pages/inventory_page.py\", line 16, in add_item_to_cart\n    add_buttons = self.find_elements(InventPage.ITEM_ADD_BUTTON)\n  File \"/media/grifftih/Linux/TestCases/SwagLabs/pages/base_page.py\", line 21, in find_elements\n    return WebDriverWait(self.driver, timeout=20).until(EC.presence_of_all_elements_located(locator),\n  File \"/media/grifftih/Linux/TestCases/SwagLabs/.venv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 96, in until\n    value = method(self._driver)\n  File \"/media/grifftih/Linux/TestCases/SwagLabs/.venv/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py\", line 191, in _predicate\n    return driver.find_elements(*locator)\n  File \"/media/grifftih/Linux/TestCases/SwagLabs/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 792, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n  File \"/media/grifftih/Linux/TestCases/SwagLabs/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/media/grifftih/Linux/TestCases/SwagLabs/.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1733926096016, "stop": 1733926096155}], "parameters": [{"name": "item_name", "value": "'Sauce Labs Backpack'"}, {"name": "expected_count", "value": "1"}], "start": 1733926096016, "stop": 1733926096164, "uuid": "79d610db-7c56-4204-b6fb-c8a072c92569", "historyId": "721f3c51ff1b8a46d1e20885feb9ec12", "testCaseId": "668d9b8285c390d4392b7b2bc58d1fd3", "fullName": "tests.test_inventory_page#test_add_item_to_cart", "labels": [{"name": "story", "value": "Положительные тесты страницы товаров"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_inventory_page"}, {"name": "host", "value": "griffith"}, {"name": "thread", "value": "7303-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_inventory_page"}]}